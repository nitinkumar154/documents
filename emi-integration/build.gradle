buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
        asciiDoctorVersion = '1.5.3'
        javaGeneratedSources = file("$buildDir/generated/java")
    }
    repositories {
    	jcenter()
    	mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciiDoctorVersion}")
        //classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.5.4"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.asciidoctor.convert'
//apply plugin: 'maven-publish'
//apply plugin: "com.jfrog.artifactory"

version = '0.0.1'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	jcenter()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR4'
    }
}

compileJava {
    doFirst {
        javaGeneratedSources.mkdirs()
    }
    options.compilerArgs += [
            '-parameters', '-s', javaGeneratedSources
    ]
}
clean.doLast {
    // clean-up directory when necessary
    file(new File(buildDir, "/generated")).deleteDir()
}

dependencies {
    compile ('org.springframework.cloud:spring-cloud-starter-eureka')
    compile ('org.springframework.boot:spring-boot-starter-web')
    compile ("org.springframework.integration:spring-integration-sftp")
    compile ('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile ('org.springframework.boot:spring-boot-starter-security')
    compile ('org.springframework.boot:spring-boot-starter-data-jpa')
    compile ('org.springframework.boot:spring-boot-starter-hateoas')
    compile ('org.springframework.boot:spring-boot-starter-batch')
    compile ('org.springframework.boot:spring-boot-starter-data-rest')
    compile ('org.hibernate:hibernate-search-orm:5.6.1.Final')
    compile ('com.zaxxer:HikariCP:2.6.3')
    compile ('mysql:mysql-connector-java')
    compile ('com.querydsl:querydsl-jpa:4.1.4')
    compile ('com.querydsl:querydsl-apt:4.1.4:jpa')
    testCompile ('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile ('org.springframework.boot:spring-boot-starter-test')
    testCompile ('org.springframework.security:spring-security-test')
    testCompile ('com.h2database:h2:1.4.196')
    
}

task createFolder{
    def configDir = new File(project.buildDir.path+"/libs", "config")
    def keystoreDir = new File(project.buildDir.path+"/libs", "keystore")
    def logDir = new File(project.buildDir.path+"/libs", "log")
    def libDir = new File(project.buildDir.path+"/libs", "lib")

    if(!logDir.exists()) {
        logDir.mkdirs()
    }
    delete configDir
    delete libDir
    delete keystoreDir

    libDir.mkdirs()
    configDir.mkdirs()
    keystoreDir.mkdirs()
}

//copy config
task copyConfig(type: Copy) {
    into project.buildDir.path+"/libs/config"
    from "config"
}

//copy keystore
task copyKeystore(type: Copy) {
    into project.buildDir.path+"/libs/keystore"
    from "keystore"
}

//copy dependencies
task copyRuntimeLibs(type: Copy) {
    into project.buildDir.path+"/libs/lib"
    from configurations.compile
}

task bundleAll(type: Jar){
    dependsOn 'createFolder', 'copyRuntimeLibs', 'copyConfig', 'copyKeystore' 

  	manifest {
        def manifestClasspath = configurations.compile.collect { "lib/" + it.getName() }.join(' ') 
            attributes 'Implementation-Title': 'emi-integration', 
                    'Implementation-Version': version,
                    'Main-Class': 'com.innoviti.emi.starter.EmiServiceStarter',
                    'Class-Path': manifestClasspath
    }
    baseName=project.name
    from { (configurations.compile - configurations.compile).collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA' 
}

task zip(type: Zip){
    dependsOn 'bundleAll'
    from 'build/libs'
}

asciidoctor {
	attributes 'snippets': file('build/generated-snippets')
}
sourceSets {
    generated {
        java {
            srcDir "$buildDir/generated/java"
        }
    }
}

